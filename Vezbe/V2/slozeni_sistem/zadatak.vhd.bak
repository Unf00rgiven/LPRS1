library ieee;
use ieee.std_logic_1164.all;

entity zadatak is
	port(
		iA : in std_logic_vector(7 downto 0);
		iB : in std_logic_vector(2 downto 0);
		iSEL : in std_logic_vector(1 downto 0);
		oY : out std_logic_vector(3 downto 0);
		oZERO : out std_logic
	);
end entity;

architecture Behavioral of zadatak is
	
begin

	-- logicka kola
	oY0 <= iX and not(iSEL(1)) and not(iSEL(0));
	oY1 <= iX and not(iSEL(1)) and iSEL(0);
	oY2 <= iX and iSEL(1) and not(iSEL(0));
	oY3 <= iX and iSEL(1) and iSEL(0);
	
	-- uslovna dodela
--	oY0 <= iX when iSEL="00" else
--			 '0';
--			 
--	oY1 <= iX when iSEL="01" else
--			 '0';
--			 
--	oY2 <= iX when iSEL="10" else
--			 '0';
--			 
--	oY3 <= iX when iSEL="11" else
--			 '0';
			 
	-- if-elsif-else
--	process (iX, iSEL) begin
--		if (iSEL="00") then
--			oY0 <= iX;
--			oY1 <= '0';
--			oY2 <= '0';
--			oY3 <= '0';
--		elsif (iSEL="01") then
--			oY0 <= '0';
--			oY1 <= iX;
--			oY2 <= '0';
--			oY3 <= '0';
--		elsif (iSEL="10") then
--			oY0 <= '0';
--			oY1 <= '0';
--			oY2 <= iX;
--			oY3 <= '0';
--		else
--			oY0 <= '0';
--			oY1 <= '0';
--			oY2 <= '0';
--			oY3 <= iX;
--		end if;
--	end process;
	
	-- case
--	process (iX, iSEL) begin
--		case (iSEL) is
--			when "00" => oY0 <= iX;
--							 oY1 <= '0';
--						    oY2 <= '0';
--							 oY3 <= '0';
--							 
--			when "01" => oY0 <= '0';
--							 oY1 <= iX;
--						    oY2 <= '0';
--							 oY3 <= '0';
--							 
--			when "10" => oY0 <= '0';
--							 oY1 <= '0';
--						    oY2 <= iX;
--							 oY3 <= '0';
--							 
--			when others => oY0 <= '0';
--							   oY1 <= '0';
--						      oY2 <= '0';
--							   oY3 <= iX;
--		end case;
--	end process;

end architecture;